generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Priority {
  LOW
  MEDIUM
  HIGH
}

/// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ chat enums â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
enum MessageType {
  TEXT   /// plain text
  PING   /// ðŸ”” nudge
  // FILE, REACTION â€¦ add more later
}

/// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ chat models â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
/// One thread (DM or small group) lives inside exactly one
/// organisation and involves â‰¥ 2 users.
model ChatThread {
  id             String           @id @default(uuid())
  organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Denormalised pointer to the latest activity for sorting
  lastMessageAt  DateTime?

  participants   ChatParticipant[]
  messages       ChatMessage[]

  @@index([organizationId])
  @@index([lastMessageAt])
}

/// Join table: which users are in which thread.
model ChatParticipant {
  thread   ChatThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId String
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String

  @@id([threadId, userId])
}

/// Every message belongs to a thread + author.
model ChatMessage {
  id        String      @id @default(uuid())
  thread    ChatThread  @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId  String
  author    User        @relation(fields: [authorId], references: [id])
  authorId  String

  type      MessageType @default(TEXT)
  body      String?     // null for non-text payloads
  createdAt DateTime    @default(now())

  @@index([threadId, createdAt])
}

model Invite {
  id             String   @id @default(uuid())
  email          String
  token          String   @unique
  organization   Organization @relation(fields:[organizationId], references:[id])
  organizationId String
  createdAt      DateTime @default(now())
}


model Organization {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  invites   Invite[]          // ðŸ‘ˆ  opposite side of the relation
chatThreads ChatThread[]
  users     User[]
  projects  Project[]
}

model Project {
  id              String   @id @default(uuid())
  name            String
  description     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  organization    Organization? @relation(fields: [organizationId], references: [id])
  organizationId  String?

  dueAt          DateTime?
  completed     Boolean @default(false)
  users           User[]   @relation("UserProjects")
  tasks           Task[]



  @@unique([organizationId, name])
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  firstName      String
  avatarUrl      String?      // ðŸ‘ˆ  add this line

  lastName       String
  chatMessages     ChatMessage[]

  chatParticipants ChatParticipant[]

  openAIKey       String?
  openAIModel    String? @default("gpt-3.5-turbo")
  jobTitle       String?
  role           String?
  preferences    Json?
  activityLogs   ActivityLog[]
  startTime      String?
  endTime        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  tasks          Task[]
  projects       Project[] @relation("UserProjects")
}

model Tag {
  id    String   @id @default(uuid())
  name  String   @unique

  tasks Task[]   @relation("TaskTags")
}

model Task {
  id             String    @id @default(uuid())
  name           String
  description    String
  notes          String?
  aiInstructions String?
  priority       Priority  @default(LOW)
  startsAt       DateTime
  dueAt          DateTime
  completed      Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  user           User    @relation(fields: [userId], references: [id])
  userId         String

  project        Project? @relation(fields: [projectId], references: [id])
  projectId      String?

  tags           Tag[]     @relation("TaskTags")
  subtasks       SubTask[]
  activityLogs   ActivityLog[]

  @@index([dueAt])
  @@index([userId])
  @@unique([projectId, name])
}

model SubTask {
  id         String   @id @default(uuid())
  name       String
  completed  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  parentTask Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId     String
}

model ActivityLog {
  id        String   @id @default(uuid())
  message   String
  createdAt DateTime @default(now())

  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String

  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@index([taskId])
  @@index([userId])
}
